//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: apigrpc.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


///*
/// The Nakama RPC protocol service built with GRPC.
///
/// Usage: instantiate `Nakama_Api_NakamaClient`, then call methods of this protocol to make API calls.
internal protocol Nakama_Api_NakamaClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Nakama_Api_NakamaClientInterceptorFactoryProtocol? { get }

  func addFriends(
    _ request: Nakama_Api_AddFriendsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Nakama_Api_AddFriendsRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func addGroupUsers(
    _ request: Nakama_Api_AddGroupUsersRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Nakama_Api_AddGroupUsersRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func authenticateApple(
    _ request: Nakama_Api_AuthenticateAppleRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Nakama_Api_AuthenticateAppleRequest, Nakama_Api_Session>

  func authenticateCustom(
    _ request: Nakama_Api_AuthenticateCustomRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Nakama_Api_AuthenticateCustomRequest, Nakama_Api_Session>

  func authenticateDevice(
    _ request: Nakama_Api_AuthenticateDeviceRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Nakama_Api_AuthenticateDeviceRequest, Nakama_Api_Session>

  func authenticateEmail(
    _ request: Nakama_Api_AuthenticateEmailRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Nakama_Api_AuthenticateEmailRequest, Nakama_Api_Session>

  func authenticateFacebook(
    _ request: Nakama_Api_AuthenticateFacebookRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Nakama_Api_AuthenticateFacebookRequest, Nakama_Api_Session>

  func authenticateFacebookInstantGame(
    _ request: Nakama_Api_AuthenticateFacebookInstantGameRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Nakama_Api_AuthenticateFacebookInstantGameRequest, Nakama_Api_Session>

  func authenticateGameCenter(
    _ request: Nakama_Api_AuthenticateGameCenterRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Nakama_Api_AuthenticateGameCenterRequest, Nakama_Api_Session>

  func authenticateGoogle(
    _ request: Nakama_Api_AuthenticateGoogleRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Nakama_Api_AuthenticateGoogleRequest, Nakama_Api_Session>

  func authenticateSteam(
    _ request: Nakama_Api_AuthenticateSteamRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Nakama_Api_AuthenticateSteamRequest, Nakama_Api_Session>

  func banGroupUsers(
    _ request: Nakama_Api_BanGroupUsersRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Nakama_Api_BanGroupUsersRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func blockFriends(
    _ request: Nakama_Api_BlockFriendsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Nakama_Api_BlockFriendsRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func createGroup(
    _ request: Nakama_Api_CreateGroupRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Nakama_Api_CreateGroupRequest, Nakama_Api_Group>

  func deleteFriends(
    _ request: Nakama_Api_DeleteFriendsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Nakama_Api_DeleteFriendsRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func deleteGroup(
    _ request: Nakama_Api_DeleteGroupRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Nakama_Api_DeleteGroupRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func deleteLeaderboardRecord(
    _ request: Nakama_Api_DeleteLeaderboardRecordRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Nakama_Api_DeleteLeaderboardRecordRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func deleteNotifications(
    _ request: Nakama_Api_DeleteNotificationsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Nakama_Api_DeleteNotificationsRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func deleteStorageObjects(
    _ request: Nakama_Api_DeleteStorageObjectsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Nakama_Api_DeleteStorageObjectsRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func event(
    _ request: Nakama_Api_Event,
    callOptions: CallOptions?
  ) -> UnaryCall<Nakama_Api_Event, SwiftProtobuf.Google_Protobuf_Empty>

  func getAccount(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions?
  ) -> UnaryCall<SwiftProtobuf.Google_Protobuf_Empty, Nakama_Api_Account>

  func getUsers(
    _ request: Nakama_Api_GetUsersRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Nakama_Api_GetUsersRequest, Nakama_Api_Users>

  func healthcheck(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions?
  ) -> UnaryCall<SwiftProtobuf.Google_Protobuf_Empty, SwiftProtobuf.Google_Protobuf_Empty>

  func importFacebookFriends(
    _ request: Nakama_Api_ImportFacebookFriendsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Nakama_Api_ImportFacebookFriendsRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func joinGroup(
    _ request: Nakama_Api_JoinGroupRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Nakama_Api_JoinGroupRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func joinTournament(
    _ request: Nakama_Api_JoinTournamentRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Nakama_Api_JoinTournamentRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func kickGroupUsers(
    _ request: Nakama_Api_KickGroupUsersRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Nakama_Api_KickGroupUsersRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func leaveGroup(
    _ request: Nakama_Api_LeaveGroupRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Nakama_Api_LeaveGroupRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func linkApple(
    _ request: Nakama_Api_AccountApple,
    callOptions: CallOptions?
  ) -> UnaryCall<Nakama_Api_AccountApple, SwiftProtobuf.Google_Protobuf_Empty>

  func linkCustom(
    _ request: Nakama_Api_AccountCustom,
    callOptions: CallOptions?
  ) -> UnaryCall<Nakama_Api_AccountCustom, SwiftProtobuf.Google_Protobuf_Empty>

  func linkDevice(
    _ request: Nakama_Api_AccountDevice,
    callOptions: CallOptions?
  ) -> UnaryCall<Nakama_Api_AccountDevice, SwiftProtobuf.Google_Protobuf_Empty>

  func linkEmail(
    _ request: Nakama_Api_AccountEmail,
    callOptions: CallOptions?
  ) -> UnaryCall<Nakama_Api_AccountEmail, SwiftProtobuf.Google_Protobuf_Empty>

  func linkFacebook(
    _ request: Nakama_Api_LinkFacebookRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Nakama_Api_LinkFacebookRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func linkFacebookInstantGame(
    _ request: Nakama_Api_AccountFacebookInstantGame,
    callOptions: CallOptions?
  ) -> UnaryCall<Nakama_Api_AccountFacebookInstantGame, SwiftProtobuf.Google_Protobuf_Empty>

  func linkGameCenter(
    _ request: Nakama_Api_AccountGameCenter,
    callOptions: CallOptions?
  ) -> UnaryCall<Nakama_Api_AccountGameCenter, SwiftProtobuf.Google_Protobuf_Empty>

  func linkGoogle(
    _ request: Nakama_Api_AccountGoogle,
    callOptions: CallOptions?
  ) -> UnaryCall<Nakama_Api_AccountGoogle, SwiftProtobuf.Google_Protobuf_Empty>

  func linkSteam(
    _ request: Nakama_Api_AccountSteam,
    callOptions: CallOptions?
  ) -> UnaryCall<Nakama_Api_AccountSteam, SwiftProtobuf.Google_Protobuf_Empty>

  func listChannelMessages(
    _ request: Nakama_Api_ListChannelMessagesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Nakama_Api_ListChannelMessagesRequest, Nakama_Api_ChannelMessageList>

  func listFriends(
    _ request: Nakama_Api_ListFriendsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Nakama_Api_ListFriendsRequest, Nakama_Api_FriendList>

  func listGroups(
    _ request: Nakama_Api_ListGroupsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Nakama_Api_ListGroupsRequest, Nakama_Api_GroupList>

  func listGroupUsers(
    _ request: Nakama_Api_ListGroupUsersRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Nakama_Api_ListGroupUsersRequest, Nakama_Api_GroupUserList>

  func listLeaderboardRecords(
    _ request: Nakama_Api_ListLeaderboardRecordsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Nakama_Api_ListLeaderboardRecordsRequest, Nakama_Api_LeaderboardRecordList>

  func listLeaderboardRecordsAroundOwner(
    _ request: Nakama_Api_ListLeaderboardRecordsAroundOwnerRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Nakama_Api_ListLeaderboardRecordsAroundOwnerRequest, Nakama_Api_LeaderboardRecordList>

  func listMatches(
    _ request: Nakama_Api_ListMatchesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Nakama_Api_ListMatchesRequest, Nakama_Api_MatchList>

  func listNotifications(
    _ request: Nakama_Api_ListNotificationsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Nakama_Api_ListNotificationsRequest, Nakama_Api_NotificationList>

  func listStorageObjects(
    _ request: Nakama_Api_ListStorageObjectsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Nakama_Api_ListStorageObjectsRequest, Nakama_Api_StorageObjectList>

  func listTournaments(
    _ request: Nakama_Api_ListTournamentsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Nakama_Api_ListTournamentsRequest, Nakama_Api_TournamentList>

  func listTournamentRecords(
    _ request: Nakama_Api_ListTournamentRecordsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Nakama_Api_ListTournamentRecordsRequest, Nakama_Api_TournamentRecordList>

  func listTournamentRecordsAroundOwner(
    _ request: Nakama_Api_ListTournamentRecordsAroundOwnerRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Nakama_Api_ListTournamentRecordsAroundOwnerRequest, Nakama_Api_TournamentRecordList>

  func listUserGroups(
    _ request: Nakama_Api_ListUserGroupsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Nakama_Api_ListUserGroupsRequest, Nakama_Api_UserGroupList>

  func promoteGroupUsers(
    _ request: Nakama_Api_PromoteGroupUsersRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Nakama_Api_PromoteGroupUsersRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func demoteGroupUsers(
    _ request: Nakama_Api_DemoteGroupUsersRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Nakama_Api_DemoteGroupUsersRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func readStorageObjects(
    _ request: Nakama_Api_ReadStorageObjectsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Nakama_Api_ReadStorageObjectsRequest, Nakama_Api_StorageObjects>

  func rpcFunc(
    _ request: Nakama_Api_Rpc,
    callOptions: CallOptions?
  ) -> UnaryCall<Nakama_Api_Rpc, Nakama_Api_Rpc>

  func unlinkApple(
    _ request: Nakama_Api_AccountApple,
    callOptions: CallOptions?
  ) -> UnaryCall<Nakama_Api_AccountApple, SwiftProtobuf.Google_Protobuf_Empty>

  func unlinkCustom(
    _ request: Nakama_Api_AccountCustom,
    callOptions: CallOptions?
  ) -> UnaryCall<Nakama_Api_AccountCustom, SwiftProtobuf.Google_Protobuf_Empty>

  func unlinkDevice(
    _ request: Nakama_Api_AccountDevice,
    callOptions: CallOptions?
  ) -> UnaryCall<Nakama_Api_AccountDevice, SwiftProtobuf.Google_Protobuf_Empty>

  func unlinkEmail(
    _ request: Nakama_Api_AccountEmail,
    callOptions: CallOptions?
  ) -> UnaryCall<Nakama_Api_AccountEmail, SwiftProtobuf.Google_Protobuf_Empty>

  func unlinkFacebook(
    _ request: Nakama_Api_AccountFacebook,
    callOptions: CallOptions?
  ) -> UnaryCall<Nakama_Api_AccountFacebook, SwiftProtobuf.Google_Protobuf_Empty>

  func unlinkFacebookInstantGame(
    _ request: Nakama_Api_AccountFacebookInstantGame,
    callOptions: CallOptions?
  ) -> UnaryCall<Nakama_Api_AccountFacebookInstantGame, SwiftProtobuf.Google_Protobuf_Empty>

  func unlinkGameCenter(
    _ request: Nakama_Api_AccountGameCenter,
    callOptions: CallOptions?
  ) -> UnaryCall<Nakama_Api_AccountGameCenter, SwiftProtobuf.Google_Protobuf_Empty>

  func unlinkGoogle(
    _ request: Nakama_Api_AccountGoogle,
    callOptions: CallOptions?
  ) -> UnaryCall<Nakama_Api_AccountGoogle, SwiftProtobuf.Google_Protobuf_Empty>

  func unlinkSteam(
    _ request: Nakama_Api_AccountSteam,
    callOptions: CallOptions?
  ) -> UnaryCall<Nakama_Api_AccountSteam, SwiftProtobuf.Google_Protobuf_Empty>

  func updateAccount(
    _ request: Nakama_Api_UpdateAccountRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Nakama_Api_UpdateAccountRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func updateGroup(
    _ request: Nakama_Api_UpdateGroupRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Nakama_Api_UpdateGroupRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func writeLeaderboardRecord(
    _ request: Nakama_Api_WriteLeaderboardRecordRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Nakama_Api_WriteLeaderboardRecordRequest, Nakama_Api_LeaderboardRecord>

  func writeStorageObjects(
    _ request: Nakama_Api_WriteStorageObjectsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Nakama_Api_WriteStorageObjectsRequest, Nakama_Api_StorageObjectAcks>

  func writeTournamentRecord(
    _ request: Nakama_Api_WriteTournamentRecordRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Nakama_Api_WriteTournamentRecordRequest, Nakama_Api_LeaderboardRecord>
}

extension Nakama_Api_NakamaClientProtocol {
  internal var serviceName: String {
    return "nakama.api.Nakama"
  }

  /// Add friends by ID or username to a user's account.
  ///
  /// - Parameters:
  ///   - request: Request to send to AddFriends.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func addFriends(
    _ request: Nakama_Api_AddFriendsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nakama_Api_AddFriendsRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: "/nakama.api.Nakama/AddFriends",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAddFriendsInterceptors() ?? []
    )
  }

  /// Add users to a group.
  ///
  /// - Parameters:
  ///   - request: Request to send to AddGroupUsers.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func addGroupUsers(
    _ request: Nakama_Api_AddGroupUsersRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nakama_Api_AddGroupUsersRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: "/nakama.api.Nakama/AddGroupUsers",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAddGroupUsersInterceptors() ?? []
    )
  }

  /// Authenticate a user with an Apple ID against the server.
  ///
  /// - Parameters:
  ///   - request: Request to send to AuthenticateApple.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func authenticateApple(
    _ request: Nakama_Api_AuthenticateAppleRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nakama_Api_AuthenticateAppleRequest, Nakama_Api_Session> {
    return self.makeUnaryCall(
      path: "/nakama.api.Nakama/AuthenticateApple",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAuthenticateAppleInterceptors() ?? []
    )
  }

  /// Authenticate a user with a custom id against the server.
  ///
  /// - Parameters:
  ///   - request: Request to send to AuthenticateCustom.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func authenticateCustom(
    _ request: Nakama_Api_AuthenticateCustomRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nakama_Api_AuthenticateCustomRequest, Nakama_Api_Session> {
    return self.makeUnaryCall(
      path: "/nakama.api.Nakama/AuthenticateCustom",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAuthenticateCustomInterceptors() ?? []
    )
  }

  /// Authenticate a user with a device id against the server.
  ///
  /// - Parameters:
  ///   - request: Request to send to AuthenticateDevice.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func authenticateDevice(
    _ request: Nakama_Api_AuthenticateDeviceRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nakama_Api_AuthenticateDeviceRequest, Nakama_Api_Session> {
    return self.makeUnaryCall(
      path: "/nakama.api.Nakama/AuthenticateDevice",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAuthenticateDeviceInterceptors() ?? []
    )
  }

  /// Authenticate a user with an email+password against the server.
  ///
  /// - Parameters:
  ///   - request: Request to send to AuthenticateEmail.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func authenticateEmail(
    _ request: Nakama_Api_AuthenticateEmailRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nakama_Api_AuthenticateEmailRequest, Nakama_Api_Session> {
    return self.makeUnaryCall(
      path: "/nakama.api.Nakama/AuthenticateEmail",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAuthenticateEmailInterceptors() ?? []
    )
  }

  /// Authenticate a user with a Facebook OAuth token against the server.
  ///
  /// - Parameters:
  ///   - request: Request to send to AuthenticateFacebook.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func authenticateFacebook(
    _ request: Nakama_Api_AuthenticateFacebookRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nakama_Api_AuthenticateFacebookRequest, Nakama_Api_Session> {
    return self.makeUnaryCall(
      path: "/nakama.api.Nakama/AuthenticateFacebook",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAuthenticateFacebookInterceptors() ?? []
    )
  }

  /// Authenticate a user with a Facebook Instant Game token against the server.
  ///
  /// - Parameters:
  ///   - request: Request to send to AuthenticateFacebookInstantGame.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func authenticateFacebookInstantGame(
    _ request: Nakama_Api_AuthenticateFacebookInstantGameRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nakama_Api_AuthenticateFacebookInstantGameRequest, Nakama_Api_Session> {
    return self.makeUnaryCall(
      path: "/nakama.api.Nakama/AuthenticateFacebookInstantGame",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAuthenticateFacebookInstantGameInterceptors() ?? []
    )
  }

  /// Authenticate a user with Apple's GameCenter against the server.
  ///
  /// - Parameters:
  ///   - request: Request to send to AuthenticateGameCenter.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func authenticateGameCenter(
    _ request: Nakama_Api_AuthenticateGameCenterRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nakama_Api_AuthenticateGameCenterRequest, Nakama_Api_Session> {
    return self.makeUnaryCall(
      path: "/nakama.api.Nakama/AuthenticateGameCenter",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAuthenticateGameCenterInterceptors() ?? []
    )
  }

  /// Authenticate a user with Google against the server.
  ///
  /// - Parameters:
  ///   - request: Request to send to AuthenticateGoogle.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func authenticateGoogle(
    _ request: Nakama_Api_AuthenticateGoogleRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nakama_Api_AuthenticateGoogleRequest, Nakama_Api_Session> {
    return self.makeUnaryCall(
      path: "/nakama.api.Nakama/AuthenticateGoogle",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAuthenticateGoogleInterceptors() ?? []
    )
  }

  /// Authenticate a user with Steam against the server.
  ///
  /// - Parameters:
  ///   - request: Request to send to AuthenticateSteam.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func authenticateSteam(
    _ request: Nakama_Api_AuthenticateSteamRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nakama_Api_AuthenticateSteamRequest, Nakama_Api_Session> {
    return self.makeUnaryCall(
      path: "/nakama.api.Nakama/AuthenticateSteam",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAuthenticateSteamInterceptors() ?? []
    )
  }

  /// Ban a set of users from a group.
  ///
  /// - Parameters:
  ///   - request: Request to send to BanGroupUsers.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func banGroupUsers(
    _ request: Nakama_Api_BanGroupUsersRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nakama_Api_BanGroupUsersRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: "/nakama.api.Nakama/BanGroupUsers",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBanGroupUsersInterceptors() ?? []
    )
  }

  /// Block one or more users by ID or username.
  ///
  /// - Parameters:
  ///   - request: Request to send to BlockFriends.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func blockFriends(
    _ request: Nakama_Api_BlockFriendsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nakama_Api_BlockFriendsRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: "/nakama.api.Nakama/BlockFriends",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBlockFriendsInterceptors() ?? []
    )
  }

  /// Create a new group with the current user as the owner.
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateGroup.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func createGroup(
    _ request: Nakama_Api_CreateGroupRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nakama_Api_CreateGroupRequest, Nakama_Api_Group> {
    return self.makeUnaryCall(
      path: "/nakama.api.Nakama/CreateGroup",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateGroupInterceptors() ?? []
    )
  }

  /// Delete one or more users by ID or username.
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteFriends.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func deleteFriends(
    _ request: Nakama_Api_DeleteFriendsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nakama_Api_DeleteFriendsRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: "/nakama.api.Nakama/DeleteFriends",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteFriendsInterceptors() ?? []
    )
  }

  /// Delete a group by ID.
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteGroup.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func deleteGroup(
    _ request: Nakama_Api_DeleteGroupRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nakama_Api_DeleteGroupRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: "/nakama.api.Nakama/DeleteGroup",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteGroupInterceptors() ?? []
    )
  }

  /// Delete a leaderboard record.
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteLeaderboardRecord.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func deleteLeaderboardRecord(
    _ request: Nakama_Api_DeleteLeaderboardRecordRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nakama_Api_DeleteLeaderboardRecordRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: "/nakama.api.Nakama/DeleteLeaderboardRecord",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteLeaderboardRecordInterceptors() ?? []
    )
  }

  /// Delete one or more notifications for the current user.
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteNotifications.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func deleteNotifications(
    _ request: Nakama_Api_DeleteNotificationsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nakama_Api_DeleteNotificationsRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: "/nakama.api.Nakama/DeleteNotifications",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteNotificationsInterceptors() ?? []
    )
  }

  /// Delete one or more objects by ID or username.
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteStorageObjects.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func deleteStorageObjects(
    _ request: Nakama_Api_DeleteStorageObjectsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nakama_Api_DeleteStorageObjectsRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: "/nakama.api.Nakama/DeleteStorageObjects",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteStorageObjectsInterceptors() ?? []
    )
  }

  /// Submit an event for processing in the server's registered runtime custom events handler.
  ///
  /// - Parameters:
  ///   - request: Request to send to Event.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func event(
    _ request: Nakama_Api_Event,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nakama_Api_Event, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: "/nakama.api.Nakama/Event",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEventInterceptors() ?? []
    )
  }

  /// Fetch the current user's account.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetAccount.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getAccount(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<SwiftProtobuf.Google_Protobuf_Empty, Nakama_Api_Account> {
    return self.makeUnaryCall(
      path: "/nakama.api.Nakama/GetAccount",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetAccountInterceptors() ?? []
    )
  }

  /// Fetch zero or more users by ID and/or username.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetUsers.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getUsers(
    _ request: Nakama_Api_GetUsersRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nakama_Api_GetUsersRequest, Nakama_Api_Users> {
    return self.makeUnaryCall(
      path: "/nakama.api.Nakama/GetUsers",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetUsersInterceptors() ?? []
    )
  }

  /// A healthcheck which load balancers can use to check the service.
  ///
  /// - Parameters:
  ///   - request: Request to send to Healthcheck.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func healthcheck(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<SwiftProtobuf.Google_Protobuf_Empty, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: "/nakama.api.Nakama/Healthcheck",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeHealthcheckInterceptors() ?? []
    )
  }

  /// Import Facebook friends and add them to a user's account.
  ///
  /// - Parameters:
  ///   - request: Request to send to ImportFacebookFriends.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func importFacebookFriends(
    _ request: Nakama_Api_ImportFacebookFriendsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nakama_Api_ImportFacebookFriendsRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: "/nakama.api.Nakama/ImportFacebookFriends",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeImportFacebookFriendsInterceptors() ?? []
    )
  }

  /// Immediately join an open group, or request to join a closed one.
  ///
  /// - Parameters:
  ///   - request: Request to send to JoinGroup.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func joinGroup(
    _ request: Nakama_Api_JoinGroupRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nakama_Api_JoinGroupRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: "/nakama.api.Nakama/JoinGroup",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeJoinGroupInterceptors() ?? []
    )
  }

  /// Attempt to join an open and running tournament.
  ///
  /// - Parameters:
  ///   - request: Request to send to JoinTournament.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func joinTournament(
    _ request: Nakama_Api_JoinTournamentRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nakama_Api_JoinTournamentRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: "/nakama.api.Nakama/JoinTournament",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeJoinTournamentInterceptors() ?? []
    )
  }

  /// Kick a set of users from a group.
  ///
  /// - Parameters:
  ///   - request: Request to send to KickGroupUsers.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func kickGroupUsers(
    _ request: Nakama_Api_KickGroupUsersRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nakama_Api_KickGroupUsersRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: "/nakama.api.Nakama/KickGroupUsers",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeKickGroupUsersInterceptors() ?? []
    )
  }

  /// Leave a group the user is a member of.
  ///
  /// - Parameters:
  ///   - request: Request to send to LeaveGroup.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func leaveGroup(
    _ request: Nakama_Api_LeaveGroupRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nakama_Api_LeaveGroupRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: "/nakama.api.Nakama/LeaveGroup",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLeaveGroupInterceptors() ?? []
    )
  }

  /// Add an Apple ID to the social profiles on the current user's account.
  ///
  /// - Parameters:
  ///   - request: Request to send to LinkApple.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func linkApple(
    _ request: Nakama_Api_AccountApple,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nakama_Api_AccountApple, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: "/nakama.api.Nakama/LinkApple",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLinkAppleInterceptors() ?? []
    )
  }

  /// Add a custom ID to the social profiles on the current user's account.
  ///
  /// - Parameters:
  ///   - request: Request to send to LinkCustom.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func linkCustom(
    _ request: Nakama_Api_AccountCustom,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nakama_Api_AccountCustom, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: "/nakama.api.Nakama/LinkCustom",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLinkCustomInterceptors() ?? []
    )
  }

  /// Add a device ID to the social profiles on the current user's account.
  ///
  /// - Parameters:
  ///   - request: Request to send to LinkDevice.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func linkDevice(
    _ request: Nakama_Api_AccountDevice,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nakama_Api_AccountDevice, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: "/nakama.api.Nakama/LinkDevice",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLinkDeviceInterceptors() ?? []
    )
  }

  /// Add an email+password to the social profiles on the current user's account.
  ///
  /// - Parameters:
  ///   - request: Request to send to LinkEmail.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func linkEmail(
    _ request: Nakama_Api_AccountEmail,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nakama_Api_AccountEmail, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: "/nakama.api.Nakama/LinkEmail",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLinkEmailInterceptors() ?? []
    )
  }

  /// Add Facebook to the social profiles on the current user's account.
  ///
  /// - Parameters:
  ///   - request: Request to send to LinkFacebook.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func linkFacebook(
    _ request: Nakama_Api_LinkFacebookRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nakama_Api_LinkFacebookRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: "/nakama.api.Nakama/LinkFacebook",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLinkFacebookInterceptors() ?? []
    )
  }

  /// Add Facebook Instant Game to the social profiles on the current user's account.
  ///
  /// - Parameters:
  ///   - request: Request to send to LinkFacebookInstantGame.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func linkFacebookInstantGame(
    _ request: Nakama_Api_AccountFacebookInstantGame,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nakama_Api_AccountFacebookInstantGame, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: "/nakama.api.Nakama/LinkFacebookInstantGame",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLinkFacebookInstantGameInterceptors() ?? []
    )
  }

  /// Add Apple's GameCenter to the social profiles on the current user's account.
  ///
  /// - Parameters:
  ///   - request: Request to send to LinkGameCenter.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func linkGameCenter(
    _ request: Nakama_Api_AccountGameCenter,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nakama_Api_AccountGameCenter, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: "/nakama.api.Nakama/LinkGameCenter",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLinkGameCenterInterceptors() ?? []
    )
  }

  /// Add Google to the social profiles on the current user's account.
  ///
  /// - Parameters:
  ///   - request: Request to send to LinkGoogle.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func linkGoogle(
    _ request: Nakama_Api_AccountGoogle,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nakama_Api_AccountGoogle, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: "/nakama.api.Nakama/LinkGoogle",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLinkGoogleInterceptors() ?? []
    )
  }

  /// Add Steam to the social profiles on the current user's account.
  ///
  /// - Parameters:
  ///   - request: Request to send to LinkSteam.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func linkSteam(
    _ request: Nakama_Api_AccountSteam,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nakama_Api_AccountSteam, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: "/nakama.api.Nakama/LinkSteam",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLinkSteamInterceptors() ?? []
    )
  }

  /// List a channel's message history.
  ///
  /// - Parameters:
  ///   - request: Request to send to ListChannelMessages.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func listChannelMessages(
    _ request: Nakama_Api_ListChannelMessagesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nakama_Api_ListChannelMessagesRequest, Nakama_Api_ChannelMessageList> {
    return self.makeUnaryCall(
      path: "/nakama.api.Nakama/ListChannelMessages",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListChannelMessagesInterceptors() ?? []
    )
  }

  /// List all friends for the current user.
  ///
  /// - Parameters:
  ///   - request: Request to send to ListFriends.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func listFriends(
    _ request: Nakama_Api_ListFriendsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nakama_Api_ListFriendsRequest, Nakama_Api_FriendList> {
    return self.makeUnaryCall(
      path: "/nakama.api.Nakama/ListFriends",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListFriendsInterceptors() ?? []
    )
  }

  /// List groups based on given filters.
  ///
  /// - Parameters:
  ///   - request: Request to send to ListGroups.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func listGroups(
    _ request: Nakama_Api_ListGroupsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nakama_Api_ListGroupsRequest, Nakama_Api_GroupList> {
    return self.makeUnaryCall(
      path: "/nakama.api.Nakama/ListGroups",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListGroupsInterceptors() ?? []
    )
  }

  /// List all users that are part of a group.
  ///
  /// - Parameters:
  ///   - request: Request to send to ListGroupUsers.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func listGroupUsers(
    _ request: Nakama_Api_ListGroupUsersRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nakama_Api_ListGroupUsersRequest, Nakama_Api_GroupUserList> {
    return self.makeUnaryCall(
      path: "/nakama.api.Nakama/ListGroupUsers",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListGroupUsersInterceptors() ?? []
    )
  }

  /// List leaderboard records.
  ///
  /// - Parameters:
  ///   - request: Request to send to ListLeaderboardRecords.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func listLeaderboardRecords(
    _ request: Nakama_Api_ListLeaderboardRecordsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nakama_Api_ListLeaderboardRecordsRequest, Nakama_Api_LeaderboardRecordList> {
    return self.makeUnaryCall(
      path: "/nakama.api.Nakama/ListLeaderboardRecords",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListLeaderboardRecordsInterceptors() ?? []
    )
  }

  /// List leaderboard records that belong to a user.
  ///
  /// - Parameters:
  ///   - request: Request to send to ListLeaderboardRecordsAroundOwner.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func listLeaderboardRecordsAroundOwner(
    _ request: Nakama_Api_ListLeaderboardRecordsAroundOwnerRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nakama_Api_ListLeaderboardRecordsAroundOwnerRequest, Nakama_Api_LeaderboardRecordList> {
    return self.makeUnaryCall(
      path: "/nakama.api.Nakama/ListLeaderboardRecordsAroundOwner",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListLeaderboardRecordsAroundOwnerInterceptors() ?? []
    )
  }

  /// Fetch list of running matches.
  ///
  /// - Parameters:
  ///   - request: Request to send to ListMatches.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func listMatches(
    _ request: Nakama_Api_ListMatchesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nakama_Api_ListMatchesRequest, Nakama_Api_MatchList> {
    return self.makeUnaryCall(
      path: "/nakama.api.Nakama/ListMatches",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListMatchesInterceptors() ?? []
    )
  }

  /// Fetch list of notifications.
  ///
  /// - Parameters:
  ///   - request: Request to send to ListNotifications.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func listNotifications(
    _ request: Nakama_Api_ListNotificationsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nakama_Api_ListNotificationsRequest, Nakama_Api_NotificationList> {
    return self.makeUnaryCall(
      path: "/nakama.api.Nakama/ListNotifications",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListNotificationsInterceptors() ?? []
    )
  }

  /// List publicly readable storage objects in a given collection.
  ///
  /// - Parameters:
  ///   - request: Request to send to ListStorageObjects.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func listStorageObjects(
    _ request: Nakama_Api_ListStorageObjectsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nakama_Api_ListStorageObjectsRequest, Nakama_Api_StorageObjectList> {
    return self.makeUnaryCall(
      path: "/nakama.api.Nakama/ListStorageObjects",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListStorageObjectsInterceptors() ?? []
    )
  }

  /// List current or upcoming tournaments.
  ///
  /// - Parameters:
  ///   - request: Request to send to ListTournaments.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func listTournaments(
    _ request: Nakama_Api_ListTournamentsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nakama_Api_ListTournamentsRequest, Nakama_Api_TournamentList> {
    return self.makeUnaryCall(
      path: "/nakama.api.Nakama/ListTournaments",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListTournamentsInterceptors() ?? []
    )
  }

  /// List tournament records.
  ///
  /// - Parameters:
  ///   - request: Request to send to ListTournamentRecords.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func listTournamentRecords(
    _ request: Nakama_Api_ListTournamentRecordsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nakama_Api_ListTournamentRecordsRequest, Nakama_Api_TournamentRecordList> {
    return self.makeUnaryCall(
      path: "/nakama.api.Nakama/ListTournamentRecords",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListTournamentRecordsInterceptors() ?? []
    )
  }

  /// List tournament records for a given owner.
  ///
  /// - Parameters:
  ///   - request: Request to send to ListTournamentRecordsAroundOwner.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func listTournamentRecordsAroundOwner(
    _ request: Nakama_Api_ListTournamentRecordsAroundOwnerRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nakama_Api_ListTournamentRecordsAroundOwnerRequest, Nakama_Api_TournamentRecordList> {
    return self.makeUnaryCall(
      path: "/nakama.api.Nakama/ListTournamentRecordsAroundOwner",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListTournamentRecordsAroundOwnerInterceptors() ?? []
    )
  }

  /// List groups the current user belongs to.
  ///
  /// - Parameters:
  ///   - request: Request to send to ListUserGroups.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func listUserGroups(
    _ request: Nakama_Api_ListUserGroupsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nakama_Api_ListUserGroupsRequest, Nakama_Api_UserGroupList> {
    return self.makeUnaryCall(
      path: "/nakama.api.Nakama/ListUserGroups",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListUserGroupsInterceptors() ?? []
    )
  }

  /// Promote a set of users in a group to the next role up.
  ///
  /// - Parameters:
  ///   - request: Request to send to PromoteGroupUsers.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func promoteGroupUsers(
    _ request: Nakama_Api_PromoteGroupUsersRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nakama_Api_PromoteGroupUsersRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: "/nakama.api.Nakama/PromoteGroupUsers",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePromoteGroupUsersInterceptors() ?? []
    )
  }

  /// Demote a set of users in a group to the next role down.
  ///
  /// - Parameters:
  ///   - request: Request to send to DemoteGroupUsers.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func demoteGroupUsers(
    _ request: Nakama_Api_DemoteGroupUsersRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nakama_Api_DemoteGroupUsersRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: "/nakama.api.Nakama/DemoteGroupUsers",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDemoteGroupUsersInterceptors() ?? []
    )
  }

  /// Get storage objects.
  ///
  /// - Parameters:
  ///   - request: Request to send to ReadStorageObjects.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func readStorageObjects(
    _ request: Nakama_Api_ReadStorageObjectsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nakama_Api_ReadStorageObjectsRequest, Nakama_Api_StorageObjects> {
    return self.makeUnaryCall(
      path: "/nakama.api.Nakama/ReadStorageObjects",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeReadStorageObjectsInterceptors() ?? []
    )
  }

  /// Execute a Lua function on the server.
  ///
  /// - Parameters:
  ///   - request: Request to send to RpcFunc.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func rpcFunc(
    _ request: Nakama_Api_Rpc,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nakama_Api_Rpc, Nakama_Api_Rpc> {
    return self.makeUnaryCall(
      path: "/nakama.api.Nakama/RpcFunc",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRpcFuncInterceptors() ?? []
    )
  }

  /// Remove the Apple ID from the social profiles on the current user's account.
  ///
  /// - Parameters:
  ///   - request: Request to send to UnlinkApple.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func unlinkApple(
    _ request: Nakama_Api_AccountApple,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nakama_Api_AccountApple, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: "/nakama.api.Nakama/UnlinkApple",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUnlinkAppleInterceptors() ?? []
    )
  }

  /// Remove the custom ID from the social profiles on the current user's account.
  ///
  /// - Parameters:
  ///   - request: Request to send to UnlinkCustom.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func unlinkCustom(
    _ request: Nakama_Api_AccountCustom,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nakama_Api_AccountCustom, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: "/nakama.api.Nakama/UnlinkCustom",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUnlinkCustomInterceptors() ?? []
    )
  }

  /// Remove the device ID from the social profiles on the current user's account.
  ///
  /// - Parameters:
  ///   - request: Request to send to UnlinkDevice.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func unlinkDevice(
    _ request: Nakama_Api_AccountDevice,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nakama_Api_AccountDevice, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: "/nakama.api.Nakama/UnlinkDevice",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUnlinkDeviceInterceptors() ?? []
    )
  }

  /// Remove the email+password from the social profiles on the current user's account.
  ///
  /// - Parameters:
  ///   - request: Request to send to UnlinkEmail.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func unlinkEmail(
    _ request: Nakama_Api_AccountEmail,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nakama_Api_AccountEmail, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: "/nakama.api.Nakama/UnlinkEmail",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUnlinkEmailInterceptors() ?? []
    )
  }

  /// Remove Facebook from the social profiles on the current user's account.
  ///
  /// - Parameters:
  ///   - request: Request to send to UnlinkFacebook.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func unlinkFacebook(
    _ request: Nakama_Api_AccountFacebook,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nakama_Api_AccountFacebook, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: "/nakama.api.Nakama/UnlinkFacebook",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUnlinkFacebookInterceptors() ?? []
    )
  }

  /// Remove Facebook Instant Game profile from the social profiles on the current user's account.
  ///
  /// - Parameters:
  ///   - request: Request to send to UnlinkFacebookInstantGame.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func unlinkFacebookInstantGame(
    _ request: Nakama_Api_AccountFacebookInstantGame,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nakama_Api_AccountFacebookInstantGame, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: "/nakama.api.Nakama/UnlinkFacebookInstantGame",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUnlinkFacebookInstantGameInterceptors() ?? []
    )
  }

  /// Remove Apple's GameCenter from the social profiles on the current user's account.
  ///
  /// - Parameters:
  ///   - request: Request to send to UnlinkGameCenter.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func unlinkGameCenter(
    _ request: Nakama_Api_AccountGameCenter,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nakama_Api_AccountGameCenter, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: "/nakama.api.Nakama/UnlinkGameCenter",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUnlinkGameCenterInterceptors() ?? []
    )
  }

  /// Remove Google from the social profiles on the current user's account.
  ///
  /// - Parameters:
  ///   - request: Request to send to UnlinkGoogle.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func unlinkGoogle(
    _ request: Nakama_Api_AccountGoogle,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nakama_Api_AccountGoogle, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: "/nakama.api.Nakama/UnlinkGoogle",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUnlinkGoogleInterceptors() ?? []
    )
  }

  /// Remove Steam from the social profiles on the current user's account.
  ///
  /// - Parameters:
  ///   - request: Request to send to UnlinkSteam.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func unlinkSteam(
    _ request: Nakama_Api_AccountSteam,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nakama_Api_AccountSteam, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: "/nakama.api.Nakama/UnlinkSteam",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUnlinkSteamInterceptors() ?? []
    )
  }

  /// Update fields in the current user's account.
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateAccount.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func updateAccount(
    _ request: Nakama_Api_UpdateAccountRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nakama_Api_UpdateAccountRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: "/nakama.api.Nakama/UpdateAccount",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateAccountInterceptors() ?? []
    )
  }

  /// Update fields in a given group.
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateGroup.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func updateGroup(
    _ request: Nakama_Api_UpdateGroupRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nakama_Api_UpdateGroupRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: "/nakama.api.Nakama/UpdateGroup",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateGroupInterceptors() ?? []
    )
  }

  /// Write a record to a leaderboard.
  ///
  /// - Parameters:
  ///   - request: Request to send to WriteLeaderboardRecord.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func writeLeaderboardRecord(
    _ request: Nakama_Api_WriteLeaderboardRecordRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nakama_Api_WriteLeaderboardRecordRequest, Nakama_Api_LeaderboardRecord> {
    return self.makeUnaryCall(
      path: "/nakama.api.Nakama/WriteLeaderboardRecord",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeWriteLeaderboardRecordInterceptors() ?? []
    )
  }

  /// Write objects into the storage engine.
  ///
  /// - Parameters:
  ///   - request: Request to send to WriteStorageObjects.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func writeStorageObjects(
    _ request: Nakama_Api_WriteStorageObjectsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nakama_Api_WriteStorageObjectsRequest, Nakama_Api_StorageObjectAcks> {
    return self.makeUnaryCall(
      path: "/nakama.api.Nakama/WriteStorageObjects",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeWriteStorageObjectsInterceptors() ?? []
    )
  }

  /// Write a record to a tournament.
  ///
  /// - Parameters:
  ///   - request: Request to send to WriteTournamentRecord.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func writeTournamentRecord(
    _ request: Nakama_Api_WriteTournamentRecordRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Nakama_Api_WriteTournamentRecordRequest, Nakama_Api_LeaderboardRecord> {
    return self.makeUnaryCall(
      path: "/nakama.api.Nakama/WriteTournamentRecord",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeWriteTournamentRecordInterceptors() ?? []
    )
  }
}

internal protocol Nakama_Api_NakamaClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'addFriends'.
  func makeAddFriendsInterceptors() -> [ClientInterceptor<Nakama_Api_AddFriendsRequest, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when invoking 'addGroupUsers'.
  func makeAddGroupUsersInterceptors() -> [ClientInterceptor<Nakama_Api_AddGroupUsersRequest, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when invoking 'authenticateApple'.
  func makeAuthenticateAppleInterceptors() -> [ClientInterceptor<Nakama_Api_AuthenticateAppleRequest, Nakama_Api_Session>]

  /// - Returns: Interceptors to use when invoking 'authenticateCustom'.
  func makeAuthenticateCustomInterceptors() -> [ClientInterceptor<Nakama_Api_AuthenticateCustomRequest, Nakama_Api_Session>]

  /// - Returns: Interceptors to use when invoking 'authenticateDevice'.
  func makeAuthenticateDeviceInterceptors() -> [ClientInterceptor<Nakama_Api_AuthenticateDeviceRequest, Nakama_Api_Session>]

  /// - Returns: Interceptors to use when invoking 'authenticateEmail'.
  func makeAuthenticateEmailInterceptors() -> [ClientInterceptor<Nakama_Api_AuthenticateEmailRequest, Nakama_Api_Session>]

  /// - Returns: Interceptors to use when invoking 'authenticateFacebook'.
  func makeAuthenticateFacebookInterceptors() -> [ClientInterceptor<Nakama_Api_AuthenticateFacebookRequest, Nakama_Api_Session>]

  /// - Returns: Interceptors to use when invoking 'authenticateFacebookInstantGame'.
  func makeAuthenticateFacebookInstantGameInterceptors() -> [ClientInterceptor<Nakama_Api_AuthenticateFacebookInstantGameRequest, Nakama_Api_Session>]

  /// - Returns: Interceptors to use when invoking 'authenticateGameCenter'.
  func makeAuthenticateGameCenterInterceptors() -> [ClientInterceptor<Nakama_Api_AuthenticateGameCenterRequest, Nakama_Api_Session>]

  /// - Returns: Interceptors to use when invoking 'authenticateGoogle'.
  func makeAuthenticateGoogleInterceptors() -> [ClientInterceptor<Nakama_Api_AuthenticateGoogleRequest, Nakama_Api_Session>]

  /// - Returns: Interceptors to use when invoking 'authenticateSteam'.
  func makeAuthenticateSteamInterceptors() -> [ClientInterceptor<Nakama_Api_AuthenticateSteamRequest, Nakama_Api_Session>]

  /// - Returns: Interceptors to use when invoking 'banGroupUsers'.
  func makeBanGroupUsersInterceptors() -> [ClientInterceptor<Nakama_Api_BanGroupUsersRequest, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when invoking 'blockFriends'.
  func makeBlockFriendsInterceptors() -> [ClientInterceptor<Nakama_Api_BlockFriendsRequest, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when invoking 'createGroup'.
  func makeCreateGroupInterceptors() -> [ClientInterceptor<Nakama_Api_CreateGroupRequest, Nakama_Api_Group>]

  /// - Returns: Interceptors to use when invoking 'deleteFriends'.
  func makeDeleteFriendsInterceptors() -> [ClientInterceptor<Nakama_Api_DeleteFriendsRequest, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when invoking 'deleteGroup'.
  func makeDeleteGroupInterceptors() -> [ClientInterceptor<Nakama_Api_DeleteGroupRequest, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when invoking 'deleteLeaderboardRecord'.
  func makeDeleteLeaderboardRecordInterceptors() -> [ClientInterceptor<Nakama_Api_DeleteLeaderboardRecordRequest, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when invoking 'deleteNotifications'.
  func makeDeleteNotificationsInterceptors() -> [ClientInterceptor<Nakama_Api_DeleteNotificationsRequest, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when invoking 'deleteStorageObjects'.
  func makeDeleteStorageObjectsInterceptors() -> [ClientInterceptor<Nakama_Api_DeleteStorageObjectsRequest, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when invoking 'event'.
  func makeEventInterceptors() -> [ClientInterceptor<Nakama_Api_Event, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when invoking 'getAccount'.
  func makeGetAccountInterceptors() -> [ClientInterceptor<SwiftProtobuf.Google_Protobuf_Empty, Nakama_Api_Account>]

  /// - Returns: Interceptors to use when invoking 'getUsers'.
  func makeGetUsersInterceptors() -> [ClientInterceptor<Nakama_Api_GetUsersRequest, Nakama_Api_Users>]

  /// - Returns: Interceptors to use when invoking 'healthcheck'.
  func makeHealthcheckInterceptors() -> [ClientInterceptor<SwiftProtobuf.Google_Protobuf_Empty, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when invoking 'importFacebookFriends'.
  func makeImportFacebookFriendsInterceptors() -> [ClientInterceptor<Nakama_Api_ImportFacebookFriendsRequest, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when invoking 'joinGroup'.
  func makeJoinGroupInterceptors() -> [ClientInterceptor<Nakama_Api_JoinGroupRequest, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when invoking 'joinTournament'.
  func makeJoinTournamentInterceptors() -> [ClientInterceptor<Nakama_Api_JoinTournamentRequest, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when invoking 'kickGroupUsers'.
  func makeKickGroupUsersInterceptors() -> [ClientInterceptor<Nakama_Api_KickGroupUsersRequest, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when invoking 'leaveGroup'.
  func makeLeaveGroupInterceptors() -> [ClientInterceptor<Nakama_Api_LeaveGroupRequest, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when invoking 'linkApple'.
  func makeLinkAppleInterceptors() -> [ClientInterceptor<Nakama_Api_AccountApple, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when invoking 'linkCustom'.
  func makeLinkCustomInterceptors() -> [ClientInterceptor<Nakama_Api_AccountCustom, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when invoking 'linkDevice'.
  func makeLinkDeviceInterceptors() -> [ClientInterceptor<Nakama_Api_AccountDevice, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when invoking 'linkEmail'.
  func makeLinkEmailInterceptors() -> [ClientInterceptor<Nakama_Api_AccountEmail, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when invoking 'linkFacebook'.
  func makeLinkFacebookInterceptors() -> [ClientInterceptor<Nakama_Api_LinkFacebookRequest, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when invoking 'linkFacebookInstantGame'.
  func makeLinkFacebookInstantGameInterceptors() -> [ClientInterceptor<Nakama_Api_AccountFacebookInstantGame, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when invoking 'linkGameCenter'.
  func makeLinkGameCenterInterceptors() -> [ClientInterceptor<Nakama_Api_AccountGameCenter, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when invoking 'linkGoogle'.
  func makeLinkGoogleInterceptors() -> [ClientInterceptor<Nakama_Api_AccountGoogle, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when invoking 'linkSteam'.
  func makeLinkSteamInterceptors() -> [ClientInterceptor<Nakama_Api_AccountSteam, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when invoking 'listChannelMessages'.
  func makeListChannelMessagesInterceptors() -> [ClientInterceptor<Nakama_Api_ListChannelMessagesRequest, Nakama_Api_ChannelMessageList>]

  /// - Returns: Interceptors to use when invoking 'listFriends'.
  func makeListFriendsInterceptors() -> [ClientInterceptor<Nakama_Api_ListFriendsRequest, Nakama_Api_FriendList>]

  /// - Returns: Interceptors to use when invoking 'listGroups'.
  func makeListGroupsInterceptors() -> [ClientInterceptor<Nakama_Api_ListGroupsRequest, Nakama_Api_GroupList>]

  /// - Returns: Interceptors to use when invoking 'listGroupUsers'.
  func makeListGroupUsersInterceptors() -> [ClientInterceptor<Nakama_Api_ListGroupUsersRequest, Nakama_Api_GroupUserList>]

  /// - Returns: Interceptors to use when invoking 'listLeaderboardRecords'.
  func makeListLeaderboardRecordsInterceptors() -> [ClientInterceptor<Nakama_Api_ListLeaderboardRecordsRequest, Nakama_Api_LeaderboardRecordList>]

  /// - Returns: Interceptors to use when invoking 'listLeaderboardRecordsAroundOwner'.
  func makeListLeaderboardRecordsAroundOwnerInterceptors() -> [ClientInterceptor<Nakama_Api_ListLeaderboardRecordsAroundOwnerRequest, Nakama_Api_LeaderboardRecordList>]

  /// - Returns: Interceptors to use when invoking 'listMatches'.
  func makeListMatchesInterceptors() -> [ClientInterceptor<Nakama_Api_ListMatchesRequest, Nakama_Api_MatchList>]

  /// - Returns: Interceptors to use when invoking 'listNotifications'.
  func makeListNotificationsInterceptors() -> [ClientInterceptor<Nakama_Api_ListNotificationsRequest, Nakama_Api_NotificationList>]

  /// - Returns: Interceptors to use when invoking 'listStorageObjects'.
  func makeListStorageObjectsInterceptors() -> [ClientInterceptor<Nakama_Api_ListStorageObjectsRequest, Nakama_Api_StorageObjectList>]

  /// - Returns: Interceptors to use when invoking 'listTournaments'.
  func makeListTournamentsInterceptors() -> [ClientInterceptor<Nakama_Api_ListTournamentsRequest, Nakama_Api_TournamentList>]

  /// - Returns: Interceptors to use when invoking 'listTournamentRecords'.
  func makeListTournamentRecordsInterceptors() -> [ClientInterceptor<Nakama_Api_ListTournamentRecordsRequest, Nakama_Api_TournamentRecordList>]

  /// - Returns: Interceptors to use when invoking 'listTournamentRecordsAroundOwner'.
  func makeListTournamentRecordsAroundOwnerInterceptors() -> [ClientInterceptor<Nakama_Api_ListTournamentRecordsAroundOwnerRequest, Nakama_Api_TournamentRecordList>]

  /// - Returns: Interceptors to use when invoking 'listUserGroups'.
  func makeListUserGroupsInterceptors() -> [ClientInterceptor<Nakama_Api_ListUserGroupsRequest, Nakama_Api_UserGroupList>]

  /// - Returns: Interceptors to use when invoking 'promoteGroupUsers'.
  func makePromoteGroupUsersInterceptors() -> [ClientInterceptor<Nakama_Api_PromoteGroupUsersRequest, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when invoking 'demoteGroupUsers'.
  func makeDemoteGroupUsersInterceptors() -> [ClientInterceptor<Nakama_Api_DemoteGroupUsersRequest, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when invoking 'readStorageObjects'.
  func makeReadStorageObjectsInterceptors() -> [ClientInterceptor<Nakama_Api_ReadStorageObjectsRequest, Nakama_Api_StorageObjects>]

  /// - Returns: Interceptors to use when invoking 'rpcFunc'.
  func makeRpcFuncInterceptors() -> [ClientInterceptor<Nakama_Api_Rpc, Nakama_Api_Rpc>]

  /// - Returns: Interceptors to use when invoking 'unlinkApple'.
  func makeUnlinkAppleInterceptors() -> [ClientInterceptor<Nakama_Api_AccountApple, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when invoking 'unlinkCustom'.
  func makeUnlinkCustomInterceptors() -> [ClientInterceptor<Nakama_Api_AccountCustom, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when invoking 'unlinkDevice'.
  func makeUnlinkDeviceInterceptors() -> [ClientInterceptor<Nakama_Api_AccountDevice, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when invoking 'unlinkEmail'.
  func makeUnlinkEmailInterceptors() -> [ClientInterceptor<Nakama_Api_AccountEmail, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when invoking 'unlinkFacebook'.
  func makeUnlinkFacebookInterceptors() -> [ClientInterceptor<Nakama_Api_AccountFacebook, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when invoking 'unlinkFacebookInstantGame'.
  func makeUnlinkFacebookInstantGameInterceptors() -> [ClientInterceptor<Nakama_Api_AccountFacebookInstantGame, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when invoking 'unlinkGameCenter'.
  func makeUnlinkGameCenterInterceptors() -> [ClientInterceptor<Nakama_Api_AccountGameCenter, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when invoking 'unlinkGoogle'.
  func makeUnlinkGoogleInterceptors() -> [ClientInterceptor<Nakama_Api_AccountGoogle, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when invoking 'unlinkSteam'.
  func makeUnlinkSteamInterceptors() -> [ClientInterceptor<Nakama_Api_AccountSteam, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when invoking 'updateAccount'.
  func makeUpdateAccountInterceptors() -> [ClientInterceptor<Nakama_Api_UpdateAccountRequest, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when invoking 'updateGroup'.
  func makeUpdateGroupInterceptors() -> [ClientInterceptor<Nakama_Api_UpdateGroupRequest, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when invoking 'writeLeaderboardRecord'.
  func makeWriteLeaderboardRecordInterceptors() -> [ClientInterceptor<Nakama_Api_WriteLeaderboardRecordRequest, Nakama_Api_LeaderboardRecord>]

  /// - Returns: Interceptors to use when invoking 'writeStorageObjects'.
  func makeWriteStorageObjectsInterceptors() -> [ClientInterceptor<Nakama_Api_WriteStorageObjectsRequest, Nakama_Api_StorageObjectAcks>]

  /// - Returns: Interceptors to use when invoking 'writeTournamentRecord'.
  func makeWriteTournamentRecordInterceptors() -> [ClientInterceptor<Nakama_Api_WriteTournamentRecordRequest, Nakama_Api_LeaderboardRecord>]
}

internal final class Nakama_Api_NakamaClient: Nakama_Api_NakamaClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Nakama_Api_NakamaClientInterceptorFactoryProtocol?

  /// Creates a client for the nakama.api.Nakama service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Nakama_Api_NakamaClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

///*
/// The Nakama RPC protocol service built with GRPC.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Nakama_Api_NakamaProvider: CallHandlerProvider {
  var interceptors: Nakama_Api_NakamaServerInterceptorFactoryProtocol? { get }

  /// Add friends by ID or username to a user's account.
  func addFriends(request: Nakama_Api_AddFriendsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>

  /// Add users to a group.
  func addGroupUsers(request: Nakama_Api_AddGroupUsersRequest, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>

  /// Authenticate a user with an Apple ID against the server.
  func authenticateApple(request: Nakama_Api_AuthenticateAppleRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Nakama_Api_Session>

  /// Authenticate a user with a custom id against the server.
  func authenticateCustom(request: Nakama_Api_AuthenticateCustomRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Nakama_Api_Session>

  /// Authenticate a user with a device id against the server.
  func authenticateDevice(request: Nakama_Api_AuthenticateDeviceRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Nakama_Api_Session>

  /// Authenticate a user with an email+password against the server.
  func authenticateEmail(request: Nakama_Api_AuthenticateEmailRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Nakama_Api_Session>

  /// Authenticate a user with a Facebook OAuth token against the server.
  func authenticateFacebook(request: Nakama_Api_AuthenticateFacebookRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Nakama_Api_Session>

  /// Authenticate a user with a Facebook Instant Game token against the server.
  func authenticateFacebookInstantGame(request: Nakama_Api_AuthenticateFacebookInstantGameRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Nakama_Api_Session>

  /// Authenticate a user with Apple's GameCenter against the server.
  func authenticateGameCenter(request: Nakama_Api_AuthenticateGameCenterRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Nakama_Api_Session>

  /// Authenticate a user with Google against the server.
  func authenticateGoogle(request: Nakama_Api_AuthenticateGoogleRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Nakama_Api_Session>

  /// Authenticate a user with Steam against the server.
  func authenticateSteam(request: Nakama_Api_AuthenticateSteamRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Nakama_Api_Session>

  /// Ban a set of users from a group.
  func banGroupUsers(request: Nakama_Api_BanGroupUsersRequest, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>

  /// Block one or more users by ID or username.
  func blockFriends(request: Nakama_Api_BlockFriendsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>

  /// Create a new group with the current user as the owner.
  func createGroup(request: Nakama_Api_CreateGroupRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Nakama_Api_Group>

  /// Delete one or more users by ID or username.
  func deleteFriends(request: Nakama_Api_DeleteFriendsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>

  /// Delete a group by ID.
  func deleteGroup(request: Nakama_Api_DeleteGroupRequest, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>

  /// Delete a leaderboard record.
  func deleteLeaderboardRecord(request: Nakama_Api_DeleteLeaderboardRecordRequest, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>

  /// Delete one or more notifications for the current user.
  func deleteNotifications(request: Nakama_Api_DeleteNotificationsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>

  /// Delete one or more objects by ID or username.
  func deleteStorageObjects(request: Nakama_Api_DeleteStorageObjectsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>

  /// Submit an event for processing in the server's registered runtime custom events handler.
  func event(request: Nakama_Api_Event, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>

  /// Fetch the current user's account.
  func getAccount(request: SwiftProtobuf.Google_Protobuf_Empty, context: StatusOnlyCallContext) -> EventLoopFuture<Nakama_Api_Account>

  /// Fetch zero or more users by ID and/or username.
  func getUsers(request: Nakama_Api_GetUsersRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Nakama_Api_Users>

  /// A healthcheck which load balancers can use to check the service.
  func healthcheck(request: SwiftProtobuf.Google_Protobuf_Empty, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>

  /// Import Facebook friends and add them to a user's account.
  func importFacebookFriends(request: Nakama_Api_ImportFacebookFriendsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>

  /// Immediately join an open group, or request to join a closed one.
  func joinGroup(request: Nakama_Api_JoinGroupRequest, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>

  /// Attempt to join an open and running tournament.
  func joinTournament(request: Nakama_Api_JoinTournamentRequest, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>

  /// Kick a set of users from a group.
  func kickGroupUsers(request: Nakama_Api_KickGroupUsersRequest, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>

  /// Leave a group the user is a member of.
  func leaveGroup(request: Nakama_Api_LeaveGroupRequest, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>

  /// Add an Apple ID to the social profiles on the current user's account.
  func linkApple(request: Nakama_Api_AccountApple, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>

  /// Add a custom ID to the social profiles on the current user's account.
  func linkCustom(request: Nakama_Api_AccountCustom, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>

  /// Add a device ID to the social profiles on the current user's account.
  func linkDevice(request: Nakama_Api_AccountDevice, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>

  /// Add an email+password to the social profiles on the current user's account.
  func linkEmail(request: Nakama_Api_AccountEmail, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>

  /// Add Facebook to the social profiles on the current user's account.
  func linkFacebook(request: Nakama_Api_LinkFacebookRequest, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>

  /// Add Facebook Instant Game to the social profiles on the current user's account.
  func linkFacebookInstantGame(request: Nakama_Api_AccountFacebookInstantGame, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>

  /// Add Apple's GameCenter to the social profiles on the current user's account.
  func linkGameCenter(request: Nakama_Api_AccountGameCenter, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>

  /// Add Google to the social profiles on the current user's account.
  func linkGoogle(request: Nakama_Api_AccountGoogle, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>

  /// Add Steam to the social profiles on the current user's account.
  func linkSteam(request: Nakama_Api_AccountSteam, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>

  /// List a channel's message history.
  func listChannelMessages(request: Nakama_Api_ListChannelMessagesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Nakama_Api_ChannelMessageList>

  /// List all friends for the current user.
  func listFriends(request: Nakama_Api_ListFriendsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Nakama_Api_FriendList>

  /// List groups based on given filters.
  func listGroups(request: Nakama_Api_ListGroupsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Nakama_Api_GroupList>

  /// List all users that are part of a group.
  func listGroupUsers(request: Nakama_Api_ListGroupUsersRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Nakama_Api_GroupUserList>

  /// List leaderboard records.
  func listLeaderboardRecords(request: Nakama_Api_ListLeaderboardRecordsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Nakama_Api_LeaderboardRecordList>

  /// List leaderboard records that belong to a user.
  func listLeaderboardRecordsAroundOwner(request: Nakama_Api_ListLeaderboardRecordsAroundOwnerRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Nakama_Api_LeaderboardRecordList>

  /// Fetch list of running matches.
  func listMatches(request: Nakama_Api_ListMatchesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Nakama_Api_MatchList>

  /// Fetch list of notifications.
  func listNotifications(request: Nakama_Api_ListNotificationsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Nakama_Api_NotificationList>

  /// List publicly readable storage objects in a given collection.
  func listStorageObjects(request: Nakama_Api_ListStorageObjectsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Nakama_Api_StorageObjectList>

  /// List current or upcoming tournaments.
  func listTournaments(request: Nakama_Api_ListTournamentsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Nakama_Api_TournamentList>

  /// List tournament records.
  func listTournamentRecords(request: Nakama_Api_ListTournamentRecordsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Nakama_Api_TournamentRecordList>

  /// List tournament records for a given owner.
  func listTournamentRecordsAroundOwner(request: Nakama_Api_ListTournamentRecordsAroundOwnerRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Nakama_Api_TournamentRecordList>

  /// List groups the current user belongs to.
  func listUserGroups(request: Nakama_Api_ListUserGroupsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Nakama_Api_UserGroupList>

  /// Promote a set of users in a group to the next role up.
  func promoteGroupUsers(request: Nakama_Api_PromoteGroupUsersRequest, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>

  /// Demote a set of users in a group to the next role down.
  func demoteGroupUsers(request: Nakama_Api_DemoteGroupUsersRequest, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>

  /// Get storage objects.
  func readStorageObjects(request: Nakama_Api_ReadStorageObjectsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Nakama_Api_StorageObjects>

  /// Execute a Lua function on the server.
  func rpcFunc(request: Nakama_Api_Rpc, context: StatusOnlyCallContext) -> EventLoopFuture<Nakama_Api_Rpc>

  /// Remove the Apple ID from the social profiles on the current user's account.
  func unlinkApple(request: Nakama_Api_AccountApple, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>

  /// Remove the custom ID from the social profiles on the current user's account.
  func unlinkCustom(request: Nakama_Api_AccountCustom, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>

  /// Remove the device ID from the social profiles on the current user's account.
  func unlinkDevice(request: Nakama_Api_AccountDevice, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>

  /// Remove the email+password from the social profiles on the current user's account.
  func unlinkEmail(request: Nakama_Api_AccountEmail, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>

  /// Remove Facebook from the social profiles on the current user's account.
  func unlinkFacebook(request: Nakama_Api_AccountFacebook, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>

  /// Remove Facebook Instant Game profile from the social profiles on the current user's account.
  func unlinkFacebookInstantGame(request: Nakama_Api_AccountFacebookInstantGame, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>

  /// Remove Apple's GameCenter from the social profiles on the current user's account.
  func unlinkGameCenter(request: Nakama_Api_AccountGameCenter, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>

  /// Remove Google from the social profiles on the current user's account.
  func unlinkGoogle(request: Nakama_Api_AccountGoogle, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>

  /// Remove Steam from the social profiles on the current user's account.
  func unlinkSteam(request: Nakama_Api_AccountSteam, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>

  /// Update fields in the current user's account.
  func updateAccount(request: Nakama_Api_UpdateAccountRequest, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>

  /// Update fields in a given group.
  func updateGroup(request: Nakama_Api_UpdateGroupRequest, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>

  /// Write a record to a leaderboard.
  func writeLeaderboardRecord(request: Nakama_Api_WriteLeaderboardRecordRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Nakama_Api_LeaderboardRecord>

  /// Write objects into the storage engine.
  func writeStorageObjects(request: Nakama_Api_WriteStorageObjectsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Nakama_Api_StorageObjectAcks>

  /// Write a record to a tournament.
  func writeTournamentRecord(request: Nakama_Api_WriteTournamentRecordRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Nakama_Api_LeaderboardRecord>
}

extension Nakama_Api_NakamaProvider {
  internal var serviceName: Substring { return "nakama.api.Nakama" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handleMethod(
    _ methodName: Substring,
    callHandlerContext: CallHandlerContext
  ) -> GRPCCallHandler? {
    switch methodName {
    case "AddFriends":
      return CallHandlerFactory.makeUnary(
        callHandlerContext: callHandlerContext,
        interceptors: self.interceptors?.makeAddFriendsInterceptors() ?? []
      ) { context in
        return { request in
          self.addFriends(request: request, context: context)
        }
      }

    case "AddGroupUsers":
      return CallHandlerFactory.makeUnary(
        callHandlerContext: callHandlerContext,
        interceptors: self.interceptors?.makeAddGroupUsersInterceptors() ?? []
      ) { context in
        return { request in
          self.addGroupUsers(request: request, context: context)
        }
      }

    case "AuthenticateApple":
      return CallHandlerFactory.makeUnary(
        callHandlerContext: callHandlerContext,
        interceptors: self.interceptors?.makeAuthenticateAppleInterceptors() ?? []
      ) { context in
        return { request in
          self.authenticateApple(request: request, context: context)
        }
      }

    case "AuthenticateCustom":
      return CallHandlerFactory.makeUnary(
        callHandlerContext: callHandlerContext,
        interceptors: self.interceptors?.makeAuthenticateCustomInterceptors() ?? []
      ) { context in
        return { request in
          self.authenticateCustom(request: request, context: context)
        }
      }

    case "AuthenticateDevice":
      return CallHandlerFactory.makeUnary(
        callHandlerContext: callHandlerContext,
        interceptors: self.interceptors?.makeAuthenticateDeviceInterceptors() ?? []
      ) { context in
        return { request in
          self.authenticateDevice(request: request, context: context)
        }
      }

    case "AuthenticateEmail":
      return CallHandlerFactory.makeUnary(
        callHandlerContext: callHandlerContext,
        interceptors: self.interceptors?.makeAuthenticateEmailInterceptors() ?? []
      ) { context in
        return { request in
          self.authenticateEmail(request: request, context: context)
        }
      }

    case "AuthenticateFacebook":
      return CallHandlerFactory.makeUnary(
        callHandlerContext: callHandlerContext,
        interceptors: self.interceptors?.makeAuthenticateFacebookInterceptors() ?? []
      ) { context in
        return { request in
          self.authenticateFacebook(request: request, context: context)
        }
      }

    case "AuthenticateFacebookInstantGame":
      return CallHandlerFactory.makeUnary(
        callHandlerContext: callHandlerContext,
        interceptors: self.interceptors?.makeAuthenticateFacebookInstantGameInterceptors() ?? []
      ) { context in
        return { request in
          self.authenticateFacebookInstantGame(request: request, context: context)
        }
      }

    case "AuthenticateGameCenter":
      return CallHandlerFactory.makeUnary(
        callHandlerContext: callHandlerContext,
        interceptors: self.interceptors?.makeAuthenticateGameCenterInterceptors() ?? []
      ) { context in
        return { request in
          self.authenticateGameCenter(request: request, context: context)
        }
      }

    case "AuthenticateGoogle":
      return CallHandlerFactory.makeUnary(
        callHandlerContext: callHandlerContext,
        interceptors: self.interceptors?.makeAuthenticateGoogleInterceptors() ?? []
      ) { context in
        return { request in
          self.authenticateGoogle(request: request, context: context)
        }
      }

    case "AuthenticateSteam":
      return CallHandlerFactory.makeUnary(
        callHandlerContext: callHandlerContext,
        interceptors: self.interceptors?.makeAuthenticateSteamInterceptors() ?? []
      ) { context in
        return { request in
          self.authenticateSteam(request: request, context: context)
        }
      }

    case "BanGroupUsers":
      return CallHandlerFactory.makeUnary(
        callHandlerContext: callHandlerContext,
        interceptors: self.interceptors?.makeBanGroupUsersInterceptors() ?? []
      ) { context in
        return { request in
          self.banGroupUsers(request: request, context: context)
        }
      }

    case "BlockFriends":
      return CallHandlerFactory.makeUnary(
        callHandlerContext: callHandlerContext,
        interceptors: self.interceptors?.makeBlockFriendsInterceptors() ?? []
      ) { context in
        return { request in
          self.blockFriends(request: request, context: context)
        }
      }

    case "CreateGroup":
      return CallHandlerFactory.makeUnary(
        callHandlerContext: callHandlerContext,
        interceptors: self.interceptors?.makeCreateGroupInterceptors() ?? []
      ) { context in
        return { request in
          self.createGroup(request: request, context: context)
        }
      }

    case "DeleteFriends":
      return CallHandlerFactory.makeUnary(
        callHandlerContext: callHandlerContext,
        interceptors: self.interceptors?.makeDeleteFriendsInterceptors() ?? []
      ) { context in
        return { request in
          self.deleteFriends(request: request, context: context)
        }
      }

    case "DeleteGroup":
      return CallHandlerFactory.makeUnary(
        callHandlerContext: callHandlerContext,
        interceptors: self.interceptors?.makeDeleteGroupInterceptors() ?? []
      ) { context in
        return { request in
          self.deleteGroup(request: request, context: context)
        }
      }

    case "DeleteLeaderboardRecord":
      return CallHandlerFactory.makeUnary(
        callHandlerContext: callHandlerContext,
        interceptors: self.interceptors?.makeDeleteLeaderboardRecordInterceptors() ?? []
      ) { context in
        return { request in
          self.deleteLeaderboardRecord(request: request, context: context)
        }
      }

    case "DeleteNotifications":
      return CallHandlerFactory.makeUnary(
        callHandlerContext: callHandlerContext,
        interceptors: self.interceptors?.makeDeleteNotificationsInterceptors() ?? []
      ) { context in
        return { request in
          self.deleteNotifications(request: request, context: context)
        }
      }

    case "DeleteStorageObjects":
      return CallHandlerFactory.makeUnary(
        callHandlerContext: callHandlerContext,
        interceptors: self.interceptors?.makeDeleteStorageObjectsInterceptors() ?? []
      ) { context in
        return { request in
          self.deleteStorageObjects(request: request, context: context)
        }
      }

    case "Event":
      return CallHandlerFactory.makeUnary(
        callHandlerContext: callHandlerContext,
        interceptors: self.interceptors?.makeEventInterceptors() ?? []
      ) { context in
        return { request in
          self.event(request: request, context: context)
        }
      }

    case "GetAccount":
      return CallHandlerFactory.makeUnary(
        callHandlerContext: callHandlerContext,
        interceptors: self.interceptors?.makeGetAccountInterceptors() ?? []
      ) { context in
        return { request in
          self.getAccount(request: request, context: context)
        }
      }

    case "GetUsers":
      return CallHandlerFactory.makeUnary(
        callHandlerContext: callHandlerContext,
        interceptors: self.interceptors?.makeGetUsersInterceptors() ?? []
      ) { context in
        return { request in
          self.getUsers(request: request, context: context)
        }
      }

    case "Healthcheck":
      return CallHandlerFactory.makeUnary(
        callHandlerContext: callHandlerContext,
        interceptors: self.interceptors?.makeHealthcheckInterceptors() ?? []
      ) { context in
        return { request in
          self.healthcheck(request: request, context: context)
        }
      }

    case "ImportFacebookFriends":
      return CallHandlerFactory.makeUnary(
        callHandlerContext: callHandlerContext,
        interceptors: self.interceptors?.makeImportFacebookFriendsInterceptors() ?? []
      ) { context in
        return { request in
          self.importFacebookFriends(request: request, context: context)
        }
      }

    case "JoinGroup":
      return CallHandlerFactory.makeUnary(
        callHandlerContext: callHandlerContext,
        interceptors: self.interceptors?.makeJoinGroupInterceptors() ?? []
      ) { context in
        return { request in
          self.joinGroup(request: request, context: context)
        }
      }

    case "JoinTournament":
      return CallHandlerFactory.makeUnary(
        callHandlerContext: callHandlerContext,
        interceptors: self.interceptors?.makeJoinTournamentInterceptors() ?? []
      ) { context in
        return { request in
          self.joinTournament(request: request, context: context)
        }
      }

    case "KickGroupUsers":
      return CallHandlerFactory.makeUnary(
        callHandlerContext: callHandlerContext,
        interceptors: self.interceptors?.makeKickGroupUsersInterceptors() ?? []
      ) { context in
        return { request in
          self.kickGroupUsers(request: request, context: context)
        }
      }

    case "LeaveGroup":
      return CallHandlerFactory.makeUnary(
        callHandlerContext: callHandlerContext,
        interceptors: self.interceptors?.makeLeaveGroupInterceptors() ?? []
      ) { context in
        return { request in
          self.leaveGroup(request: request, context: context)
        }
      }

    case "LinkApple":
      return CallHandlerFactory.makeUnary(
        callHandlerContext: callHandlerContext,
        interceptors: self.interceptors?.makeLinkAppleInterceptors() ?? []
      ) { context in
        return { request in
          self.linkApple(request: request, context: context)
        }
      }

    case "LinkCustom":
      return CallHandlerFactory.makeUnary(
        callHandlerContext: callHandlerContext,
        interceptors: self.interceptors?.makeLinkCustomInterceptors() ?? []
      ) { context in
        return { request in
          self.linkCustom(request: request, context: context)
        }
      }

    case "LinkDevice":
      return CallHandlerFactory.makeUnary(
        callHandlerContext: callHandlerContext,
        interceptors: self.interceptors?.makeLinkDeviceInterceptors() ?? []
      ) { context in
        return { request in
          self.linkDevice(request: request, context: context)
        }
      }

    case "LinkEmail":
      return CallHandlerFactory.makeUnary(
        callHandlerContext: callHandlerContext,
        interceptors: self.interceptors?.makeLinkEmailInterceptors() ?? []
      ) { context in
        return { request in
          self.linkEmail(request: request, context: context)
        }
      }

    case "LinkFacebook":
      return CallHandlerFactory.makeUnary(
        callHandlerContext: callHandlerContext,
        interceptors: self.interceptors?.makeLinkFacebookInterceptors() ?? []
      ) { context in
        return { request in
          self.linkFacebook(request: request, context: context)
        }
      }

    case "LinkFacebookInstantGame":
      return CallHandlerFactory.makeUnary(
        callHandlerContext: callHandlerContext,
        interceptors: self.interceptors?.makeLinkFacebookInstantGameInterceptors() ?? []
      ) { context in
        return { request in
          self.linkFacebookInstantGame(request: request, context: context)
        }
      }

    case "LinkGameCenter":
      return CallHandlerFactory.makeUnary(
        callHandlerContext: callHandlerContext,
        interceptors: self.interceptors?.makeLinkGameCenterInterceptors() ?? []
      ) { context in
        return { request in
          self.linkGameCenter(request: request, context: context)
        }
      }

    case "LinkGoogle":
      return CallHandlerFactory.makeUnary(
        callHandlerContext: callHandlerContext,
        interceptors: self.interceptors?.makeLinkGoogleInterceptors() ?? []
      ) { context in
        return { request in
          self.linkGoogle(request: request, context: context)
        }
      }

    case "LinkSteam":
      return CallHandlerFactory.makeUnary(
        callHandlerContext: callHandlerContext,
        interceptors: self.interceptors?.makeLinkSteamInterceptors() ?? []
      ) { context in
        return { request in
          self.linkSteam(request: request, context: context)
        }
      }

    case "ListChannelMessages":
      return CallHandlerFactory.makeUnary(
        callHandlerContext: callHandlerContext,
        interceptors: self.interceptors?.makeListChannelMessagesInterceptors() ?? []
      ) { context in
        return { request in
          self.listChannelMessages(request: request, context: context)
        }
      }

    case "ListFriends":
      return CallHandlerFactory.makeUnary(
        callHandlerContext: callHandlerContext,
        interceptors: self.interceptors?.makeListFriendsInterceptors() ?? []
      ) { context in
        return { request in
          self.listFriends(request: request, context: context)
        }
      }

    case "ListGroups":
      return CallHandlerFactory.makeUnary(
        callHandlerContext: callHandlerContext,
        interceptors: self.interceptors?.makeListGroupsInterceptors() ?? []
      ) { context in
        return { request in
          self.listGroups(request: request, context: context)
        }
      }

    case "ListGroupUsers":
      return CallHandlerFactory.makeUnary(
        callHandlerContext: callHandlerContext,
        interceptors: self.interceptors?.makeListGroupUsersInterceptors() ?? []
      ) { context in
        return { request in
          self.listGroupUsers(request: request, context: context)
        }
      }

    case "ListLeaderboardRecords":
      return CallHandlerFactory.makeUnary(
        callHandlerContext: callHandlerContext,
        interceptors: self.interceptors?.makeListLeaderboardRecordsInterceptors() ?? []
      ) { context in
        return { request in
          self.listLeaderboardRecords(request: request, context: context)
        }
      }

    case "ListLeaderboardRecordsAroundOwner":
      return CallHandlerFactory.makeUnary(
        callHandlerContext: callHandlerContext,
        interceptors: self.interceptors?.makeListLeaderboardRecordsAroundOwnerInterceptors() ?? []
      ) { context in
        return { request in
          self.listLeaderboardRecordsAroundOwner(request: request, context: context)
        }
      }

    case "ListMatches":
      return CallHandlerFactory.makeUnary(
        callHandlerContext: callHandlerContext,
        interceptors: self.interceptors?.makeListMatchesInterceptors() ?? []
      ) { context in
        return { request in
          self.listMatches(request: request, context: context)
        }
      }

    case "ListNotifications":
      return CallHandlerFactory.makeUnary(
        callHandlerContext: callHandlerContext,
        interceptors: self.interceptors?.makeListNotificationsInterceptors() ?? []
      ) { context in
        return { request in
          self.listNotifications(request: request, context: context)
        }
      }

    case "ListStorageObjects":
      return CallHandlerFactory.makeUnary(
        callHandlerContext: callHandlerContext,
        interceptors: self.interceptors?.makeListStorageObjectsInterceptors() ?? []
      ) { context in
        return { request in
          self.listStorageObjects(request: request, context: context)
        }
      }

    case "ListTournaments":
      return CallHandlerFactory.makeUnary(
        callHandlerContext: callHandlerContext,
        interceptors: self.interceptors?.makeListTournamentsInterceptors() ?? []
      ) { context in
        return { request in
          self.listTournaments(request: request, context: context)
        }
      }

    case "ListTournamentRecords":
      return CallHandlerFactory.makeUnary(
        callHandlerContext: callHandlerContext,
        interceptors: self.interceptors?.makeListTournamentRecordsInterceptors() ?? []
      ) { context in
        return { request in
          self.listTournamentRecords(request: request, context: context)
        }
      }

    case "ListTournamentRecordsAroundOwner":
      return CallHandlerFactory.makeUnary(
        callHandlerContext: callHandlerContext,
        interceptors: self.interceptors?.makeListTournamentRecordsAroundOwnerInterceptors() ?? []
      ) { context in
        return { request in
          self.listTournamentRecordsAroundOwner(request: request, context: context)
        }
      }

    case "ListUserGroups":
      return CallHandlerFactory.makeUnary(
        callHandlerContext: callHandlerContext,
        interceptors: self.interceptors?.makeListUserGroupsInterceptors() ?? []
      ) { context in
        return { request in
          self.listUserGroups(request: request, context: context)
        }
      }

    case "PromoteGroupUsers":
      return CallHandlerFactory.makeUnary(
        callHandlerContext: callHandlerContext,
        interceptors: self.interceptors?.makePromoteGroupUsersInterceptors() ?? []
      ) { context in
        return { request in
          self.promoteGroupUsers(request: request, context: context)
        }
      }

    case "DemoteGroupUsers":
      return CallHandlerFactory.makeUnary(
        callHandlerContext: callHandlerContext,
        interceptors: self.interceptors?.makeDemoteGroupUsersInterceptors() ?? []
      ) { context in
        return { request in
          self.demoteGroupUsers(request: request, context: context)
        }
      }

    case "ReadStorageObjects":
      return CallHandlerFactory.makeUnary(
        callHandlerContext: callHandlerContext,
        interceptors: self.interceptors?.makeReadStorageObjectsInterceptors() ?? []
      ) { context in
        return { request in
          self.readStorageObjects(request: request, context: context)
        }
      }

    case "RpcFunc":
      return CallHandlerFactory.makeUnary(
        callHandlerContext: callHandlerContext,
        interceptors: self.interceptors?.makeRpcFuncInterceptors() ?? []
      ) { context in
        return { request in
          self.rpcFunc(request: request, context: context)
        }
      }

    case "UnlinkApple":
      return CallHandlerFactory.makeUnary(
        callHandlerContext: callHandlerContext,
        interceptors: self.interceptors?.makeUnlinkAppleInterceptors() ?? []
      ) { context in
        return { request in
          self.unlinkApple(request: request, context: context)
        }
      }

    case "UnlinkCustom":
      return CallHandlerFactory.makeUnary(
        callHandlerContext: callHandlerContext,
        interceptors: self.interceptors?.makeUnlinkCustomInterceptors() ?? []
      ) { context in
        return { request in
          self.unlinkCustom(request: request, context: context)
        }
      }

    case "UnlinkDevice":
      return CallHandlerFactory.makeUnary(
        callHandlerContext: callHandlerContext,
        interceptors: self.interceptors?.makeUnlinkDeviceInterceptors() ?? []
      ) { context in
        return { request in
          self.unlinkDevice(request: request, context: context)
        }
      }

    case "UnlinkEmail":
      return CallHandlerFactory.makeUnary(
        callHandlerContext: callHandlerContext,
        interceptors: self.interceptors?.makeUnlinkEmailInterceptors() ?? []
      ) { context in
        return { request in
          self.unlinkEmail(request: request, context: context)
        }
      }

    case "UnlinkFacebook":
      return CallHandlerFactory.makeUnary(
        callHandlerContext: callHandlerContext,
        interceptors: self.interceptors?.makeUnlinkFacebookInterceptors() ?? []
      ) { context in
        return { request in
          self.unlinkFacebook(request: request, context: context)
        }
      }

    case "UnlinkFacebookInstantGame":
      return CallHandlerFactory.makeUnary(
        callHandlerContext: callHandlerContext,
        interceptors: self.interceptors?.makeUnlinkFacebookInstantGameInterceptors() ?? []
      ) { context in
        return { request in
          self.unlinkFacebookInstantGame(request: request, context: context)
        }
      }

    case "UnlinkGameCenter":
      return CallHandlerFactory.makeUnary(
        callHandlerContext: callHandlerContext,
        interceptors: self.interceptors?.makeUnlinkGameCenterInterceptors() ?? []
      ) { context in
        return { request in
          self.unlinkGameCenter(request: request, context: context)
        }
      }

    case "UnlinkGoogle":
      return CallHandlerFactory.makeUnary(
        callHandlerContext: callHandlerContext,
        interceptors: self.interceptors?.makeUnlinkGoogleInterceptors() ?? []
      ) { context in
        return { request in
          self.unlinkGoogle(request: request, context: context)
        }
      }

    case "UnlinkSteam":
      return CallHandlerFactory.makeUnary(
        callHandlerContext: callHandlerContext,
        interceptors: self.interceptors?.makeUnlinkSteamInterceptors() ?? []
      ) { context in
        return { request in
          self.unlinkSteam(request: request, context: context)
        }
      }

    case "UpdateAccount":
      return CallHandlerFactory.makeUnary(
        callHandlerContext: callHandlerContext,
        interceptors: self.interceptors?.makeUpdateAccountInterceptors() ?? []
      ) { context in
        return { request in
          self.updateAccount(request: request, context: context)
        }
      }

    case "UpdateGroup":
      return CallHandlerFactory.makeUnary(
        callHandlerContext: callHandlerContext,
        interceptors: self.interceptors?.makeUpdateGroupInterceptors() ?? []
      ) { context in
        return { request in
          self.updateGroup(request: request, context: context)
        }
      }

    case "WriteLeaderboardRecord":
      return CallHandlerFactory.makeUnary(
        callHandlerContext: callHandlerContext,
        interceptors: self.interceptors?.makeWriteLeaderboardRecordInterceptors() ?? []
      ) { context in
        return { request in
          self.writeLeaderboardRecord(request: request, context: context)
        }
      }

    case "WriteStorageObjects":
      return CallHandlerFactory.makeUnary(
        callHandlerContext: callHandlerContext,
        interceptors: self.interceptors?.makeWriteStorageObjectsInterceptors() ?? []
      ) { context in
        return { request in
          self.writeStorageObjects(request: request, context: context)
        }
      }

    case "WriteTournamentRecord":
      return CallHandlerFactory.makeUnary(
        callHandlerContext: callHandlerContext,
        interceptors: self.interceptors?.makeWriteTournamentRecordInterceptors() ?? []
      ) { context in
        return { request in
          self.writeTournamentRecord(request: request, context: context)
        }
      }

    default:
      return nil
    }
  }
}

internal protocol Nakama_Api_NakamaServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'addFriends'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAddFriendsInterceptors() -> [ServerInterceptor<Nakama_Api_AddFriendsRequest, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when handling 'addGroupUsers'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAddGroupUsersInterceptors() -> [ServerInterceptor<Nakama_Api_AddGroupUsersRequest, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when handling 'authenticateApple'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAuthenticateAppleInterceptors() -> [ServerInterceptor<Nakama_Api_AuthenticateAppleRequest, Nakama_Api_Session>]

  /// - Returns: Interceptors to use when handling 'authenticateCustom'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAuthenticateCustomInterceptors() -> [ServerInterceptor<Nakama_Api_AuthenticateCustomRequest, Nakama_Api_Session>]

  /// - Returns: Interceptors to use when handling 'authenticateDevice'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAuthenticateDeviceInterceptors() -> [ServerInterceptor<Nakama_Api_AuthenticateDeviceRequest, Nakama_Api_Session>]

  /// - Returns: Interceptors to use when handling 'authenticateEmail'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAuthenticateEmailInterceptors() -> [ServerInterceptor<Nakama_Api_AuthenticateEmailRequest, Nakama_Api_Session>]

  /// - Returns: Interceptors to use when handling 'authenticateFacebook'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAuthenticateFacebookInterceptors() -> [ServerInterceptor<Nakama_Api_AuthenticateFacebookRequest, Nakama_Api_Session>]

  /// - Returns: Interceptors to use when handling 'authenticateFacebookInstantGame'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAuthenticateFacebookInstantGameInterceptors() -> [ServerInterceptor<Nakama_Api_AuthenticateFacebookInstantGameRequest, Nakama_Api_Session>]

  /// - Returns: Interceptors to use when handling 'authenticateGameCenter'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAuthenticateGameCenterInterceptors() -> [ServerInterceptor<Nakama_Api_AuthenticateGameCenterRequest, Nakama_Api_Session>]

  /// - Returns: Interceptors to use when handling 'authenticateGoogle'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAuthenticateGoogleInterceptors() -> [ServerInterceptor<Nakama_Api_AuthenticateGoogleRequest, Nakama_Api_Session>]

  /// - Returns: Interceptors to use when handling 'authenticateSteam'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAuthenticateSteamInterceptors() -> [ServerInterceptor<Nakama_Api_AuthenticateSteamRequest, Nakama_Api_Session>]

  /// - Returns: Interceptors to use when handling 'banGroupUsers'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeBanGroupUsersInterceptors() -> [ServerInterceptor<Nakama_Api_BanGroupUsersRequest, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when handling 'blockFriends'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeBlockFriendsInterceptors() -> [ServerInterceptor<Nakama_Api_BlockFriendsRequest, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when handling 'createGroup'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCreateGroupInterceptors() -> [ServerInterceptor<Nakama_Api_CreateGroupRequest, Nakama_Api_Group>]

  /// - Returns: Interceptors to use when handling 'deleteFriends'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDeleteFriendsInterceptors() -> [ServerInterceptor<Nakama_Api_DeleteFriendsRequest, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when handling 'deleteGroup'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDeleteGroupInterceptors() -> [ServerInterceptor<Nakama_Api_DeleteGroupRequest, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when handling 'deleteLeaderboardRecord'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDeleteLeaderboardRecordInterceptors() -> [ServerInterceptor<Nakama_Api_DeleteLeaderboardRecordRequest, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when handling 'deleteNotifications'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDeleteNotificationsInterceptors() -> [ServerInterceptor<Nakama_Api_DeleteNotificationsRequest, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when handling 'deleteStorageObjects'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDeleteStorageObjectsInterceptors() -> [ServerInterceptor<Nakama_Api_DeleteStorageObjectsRequest, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when handling 'event'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeEventInterceptors() -> [ServerInterceptor<Nakama_Api_Event, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when handling 'getAccount'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetAccountInterceptors() -> [ServerInterceptor<SwiftProtobuf.Google_Protobuf_Empty, Nakama_Api_Account>]

  /// - Returns: Interceptors to use when handling 'getUsers'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetUsersInterceptors() -> [ServerInterceptor<Nakama_Api_GetUsersRequest, Nakama_Api_Users>]

  /// - Returns: Interceptors to use when handling 'healthcheck'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeHealthcheckInterceptors() -> [ServerInterceptor<SwiftProtobuf.Google_Protobuf_Empty, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when handling 'importFacebookFriends'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeImportFacebookFriendsInterceptors() -> [ServerInterceptor<Nakama_Api_ImportFacebookFriendsRequest, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when handling 'joinGroup'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeJoinGroupInterceptors() -> [ServerInterceptor<Nakama_Api_JoinGroupRequest, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when handling 'joinTournament'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeJoinTournamentInterceptors() -> [ServerInterceptor<Nakama_Api_JoinTournamentRequest, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when handling 'kickGroupUsers'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeKickGroupUsersInterceptors() -> [ServerInterceptor<Nakama_Api_KickGroupUsersRequest, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when handling 'leaveGroup'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeLeaveGroupInterceptors() -> [ServerInterceptor<Nakama_Api_LeaveGroupRequest, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when handling 'linkApple'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeLinkAppleInterceptors() -> [ServerInterceptor<Nakama_Api_AccountApple, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when handling 'linkCustom'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeLinkCustomInterceptors() -> [ServerInterceptor<Nakama_Api_AccountCustom, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when handling 'linkDevice'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeLinkDeviceInterceptors() -> [ServerInterceptor<Nakama_Api_AccountDevice, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when handling 'linkEmail'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeLinkEmailInterceptors() -> [ServerInterceptor<Nakama_Api_AccountEmail, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when handling 'linkFacebook'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeLinkFacebookInterceptors() -> [ServerInterceptor<Nakama_Api_LinkFacebookRequest, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when handling 'linkFacebookInstantGame'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeLinkFacebookInstantGameInterceptors() -> [ServerInterceptor<Nakama_Api_AccountFacebookInstantGame, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when handling 'linkGameCenter'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeLinkGameCenterInterceptors() -> [ServerInterceptor<Nakama_Api_AccountGameCenter, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when handling 'linkGoogle'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeLinkGoogleInterceptors() -> [ServerInterceptor<Nakama_Api_AccountGoogle, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when handling 'linkSteam'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeLinkSteamInterceptors() -> [ServerInterceptor<Nakama_Api_AccountSteam, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when handling 'listChannelMessages'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeListChannelMessagesInterceptors() -> [ServerInterceptor<Nakama_Api_ListChannelMessagesRequest, Nakama_Api_ChannelMessageList>]

  /// - Returns: Interceptors to use when handling 'listFriends'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeListFriendsInterceptors() -> [ServerInterceptor<Nakama_Api_ListFriendsRequest, Nakama_Api_FriendList>]

  /// - Returns: Interceptors to use when handling 'listGroups'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeListGroupsInterceptors() -> [ServerInterceptor<Nakama_Api_ListGroupsRequest, Nakama_Api_GroupList>]

  /// - Returns: Interceptors to use when handling 'listGroupUsers'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeListGroupUsersInterceptors() -> [ServerInterceptor<Nakama_Api_ListGroupUsersRequest, Nakama_Api_GroupUserList>]

  /// - Returns: Interceptors to use when handling 'listLeaderboardRecords'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeListLeaderboardRecordsInterceptors() -> [ServerInterceptor<Nakama_Api_ListLeaderboardRecordsRequest, Nakama_Api_LeaderboardRecordList>]

  /// - Returns: Interceptors to use when handling 'listLeaderboardRecordsAroundOwner'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeListLeaderboardRecordsAroundOwnerInterceptors() -> [ServerInterceptor<Nakama_Api_ListLeaderboardRecordsAroundOwnerRequest, Nakama_Api_LeaderboardRecordList>]

  /// - Returns: Interceptors to use when handling 'listMatches'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeListMatchesInterceptors() -> [ServerInterceptor<Nakama_Api_ListMatchesRequest, Nakama_Api_MatchList>]

  /// - Returns: Interceptors to use when handling 'listNotifications'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeListNotificationsInterceptors() -> [ServerInterceptor<Nakama_Api_ListNotificationsRequest, Nakama_Api_NotificationList>]

  /// - Returns: Interceptors to use when handling 'listStorageObjects'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeListStorageObjectsInterceptors() -> [ServerInterceptor<Nakama_Api_ListStorageObjectsRequest, Nakama_Api_StorageObjectList>]

  /// - Returns: Interceptors to use when handling 'listTournaments'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeListTournamentsInterceptors() -> [ServerInterceptor<Nakama_Api_ListTournamentsRequest, Nakama_Api_TournamentList>]

  /// - Returns: Interceptors to use when handling 'listTournamentRecords'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeListTournamentRecordsInterceptors() -> [ServerInterceptor<Nakama_Api_ListTournamentRecordsRequest, Nakama_Api_TournamentRecordList>]

  /// - Returns: Interceptors to use when handling 'listTournamentRecordsAroundOwner'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeListTournamentRecordsAroundOwnerInterceptors() -> [ServerInterceptor<Nakama_Api_ListTournamentRecordsAroundOwnerRequest, Nakama_Api_TournamentRecordList>]

  /// - Returns: Interceptors to use when handling 'listUserGroups'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeListUserGroupsInterceptors() -> [ServerInterceptor<Nakama_Api_ListUserGroupsRequest, Nakama_Api_UserGroupList>]

  /// - Returns: Interceptors to use when handling 'promoteGroupUsers'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makePromoteGroupUsersInterceptors() -> [ServerInterceptor<Nakama_Api_PromoteGroupUsersRequest, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when handling 'demoteGroupUsers'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDemoteGroupUsersInterceptors() -> [ServerInterceptor<Nakama_Api_DemoteGroupUsersRequest, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when handling 'readStorageObjects'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeReadStorageObjectsInterceptors() -> [ServerInterceptor<Nakama_Api_ReadStorageObjectsRequest, Nakama_Api_StorageObjects>]

  /// - Returns: Interceptors to use when handling 'rpcFunc'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRpcFuncInterceptors() -> [ServerInterceptor<Nakama_Api_Rpc, Nakama_Api_Rpc>]

  /// - Returns: Interceptors to use when handling 'unlinkApple'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUnlinkAppleInterceptors() -> [ServerInterceptor<Nakama_Api_AccountApple, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when handling 'unlinkCustom'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUnlinkCustomInterceptors() -> [ServerInterceptor<Nakama_Api_AccountCustom, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when handling 'unlinkDevice'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUnlinkDeviceInterceptors() -> [ServerInterceptor<Nakama_Api_AccountDevice, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when handling 'unlinkEmail'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUnlinkEmailInterceptors() -> [ServerInterceptor<Nakama_Api_AccountEmail, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when handling 'unlinkFacebook'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUnlinkFacebookInterceptors() -> [ServerInterceptor<Nakama_Api_AccountFacebook, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when handling 'unlinkFacebookInstantGame'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUnlinkFacebookInstantGameInterceptors() -> [ServerInterceptor<Nakama_Api_AccountFacebookInstantGame, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when handling 'unlinkGameCenter'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUnlinkGameCenterInterceptors() -> [ServerInterceptor<Nakama_Api_AccountGameCenter, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when handling 'unlinkGoogle'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUnlinkGoogleInterceptors() -> [ServerInterceptor<Nakama_Api_AccountGoogle, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when handling 'unlinkSteam'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUnlinkSteamInterceptors() -> [ServerInterceptor<Nakama_Api_AccountSteam, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when handling 'updateAccount'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUpdateAccountInterceptors() -> [ServerInterceptor<Nakama_Api_UpdateAccountRequest, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when handling 'updateGroup'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUpdateGroupInterceptors() -> [ServerInterceptor<Nakama_Api_UpdateGroupRequest, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when handling 'writeLeaderboardRecord'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeWriteLeaderboardRecordInterceptors() -> [ServerInterceptor<Nakama_Api_WriteLeaderboardRecordRequest, Nakama_Api_LeaderboardRecord>]

  /// - Returns: Interceptors to use when handling 'writeStorageObjects'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeWriteStorageObjectsInterceptors() -> [ServerInterceptor<Nakama_Api_WriteStorageObjectsRequest, Nakama_Api_StorageObjectAcks>]

  /// - Returns: Interceptors to use when handling 'writeTournamentRecord'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeWriteTournamentRecordInterceptors() -> [ServerInterceptor<Nakama_Api_WriteTournamentRecordRequest, Nakama_Api_LeaderboardRecord>]
}
